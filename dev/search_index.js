var documenterSearchIndex = {"docs":
[{"location":"#FermionicHilbertSpaces","page":"Home","title":"FermionicHilbertSpaces","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for FermionicHilbertSpaces.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Pkg; Pkg.add(url=\"https://github.com/cvsvensson/FermionicHilbertSpaces.jl\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"or by adding a registry to your julia environment and then installing the package","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg; Pkg.Registry.add(RegistrySpec(url = \"https://github.com/williamesamuelson/PackageRegistry\"))\nPkg.add(\"FermionicHilbertSpaces\")","category":"page"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The following example demonstrates how to define a fermionic Hilbert space, create fermionic operators, and construct a simple Hamiltonian:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using FermionicHilbertSpaces, LinearAlgebra\nN = 2 # number of fermions\nspatial_labels = 1:N \ninternal_labels = (:↑,:↓)\nlabels = Base.product(spatial_labels, internal_labels) \nH = hilbert_space(labels) ","category":"page"},{"location":"","page":"Home","title":"Home","text":"c = fermions(H) # fermionic annihilation operators","category":"page"},{"location":"#Define-a-simple-Hamiltonian-from-the-fermionic-operators","page":"Home","title":"Define a simple Hamiltonian from the fermionic operators","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"H_hopping = c[1,:↑]'c[2,:↑] + c[1,:↓]'c[2,:↓] + hc \nH_coulomb = sum(c[n,:↑]'c[n,:↑]c[n,:↓]'c[n,:↓] for n in spatial_labels)\nH_hopping + H_coulomb","category":"page"},{"location":"#Defining-a-symbolic-hamiltonian","page":"Home","title":"Defining a symbolic hamiltonian","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"@fermions f \nmatrix_representation(f[1,:↑]'*f[1,:↑], H)","category":"page"},{"location":"#Tensor-product-and-partial-trace","page":"Home","title":"Tensor product and partial trace","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"H1 = hilbert_space(1:2)\nH2 = hilbert_space(3:4)\nH = tensor_product(H1, H2)\nc1,c2,c = fermions(H1), fermions(H2), fermions(H)\nc1c3 = tensor_product([c1[1], c2[3]], [H1, H2] => H)\nc[1]*c[3] == c1c3","category":"page"},{"location":"","page":"Home","title":"Home","text":"partial_trace(tensor_product([c1[1], I/4], [H1, H2] => H), H => H1) == c1[1] ","category":"page"},{"location":"#Subspace","page":"Home","title":"Subspace","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"H1 == FermionicHilbertSpaces.subspace([1,2], H)","category":"page"},{"location":"#Conserved-quantum-numbers","page":"Home","title":"Conserved quantum numbers","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"H = hilbert_space([1,2], ParityConservation())","category":"page"},{"location":"#Functions","page":"Home","title":"Functions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Docstrings","page":"Home","title":"Docstrings","text":"","category":"section"},{"location":"#FermionicHilbertSpaces.FermionConservation","page":"Home","title":"FermionicHilbertSpaces.FermionConservation","text":"FermionConservation\n\nA symmetry type representing conservation of total fermion number.\n\n\n\n\n\n","category":"type"},{"location":"#FermionicHilbertSpaces.FockHilbertSpace","page":"Home","title":"FermionicHilbertSpaces.FockHilbertSpace","text":"FockHilbertSpace\n\nA type representing a Fock Hilbert space with a given set of modes and Fock states.\n\n\n\n\n\n","category":"type"},{"location":"#FermionicHilbertSpaces.FockNumber","page":"Home","title":"FermionicHilbertSpaces.FockNumber","text":"FockNumber\n\nA type representing a Fock state as the bitstring of an integer.\n\n\n\n\n\n","category":"type"},{"location":"#FermionicHilbertSpaces.FockSymmetry","page":"Home","title":"FermionicHilbertSpaces.FockSymmetry","text":"struct FockSymmetry{IF,FI,QN,QNfunc} <: AbstractSymmetry\n\nFockSymmetry represents a symmetry that is diagonal in fock space, i.e. particle number conservation, parity, spin consvervation.\n\nFields\n\nindtofockdict::IF: A dictionary mapping indices to Fock states.\nfocktoinddict::FI: A dictionary mapping Fock states to indices.\nqntoblocksizes::Dictionary{QN,Int}: A dictionary mapping quantum numbers to block sizes.\nqntofockstates::Dictionary{QN,Vector{Int}}: A dictionary mapping quantum numbers to Fock states.\nqntoinds::Dictionary{QN,Vector{Int}}: A dictionary mapping quantum numbers to indices.\nconserved_quantity::QNfunc: A function that computes the conserved quantity from a fock number.\n\n\n\n\n\n","category":"type"},{"location":"#FermionicHilbertSpaces.HC","page":"Home","title":"FermionicHilbertSpaces.HC","text":"HC\n\nRepresents the Hermitian conjugate.\n\n\n\n\n\n","category":"type"},{"location":"#FermionicHilbertSpaces.IndexConservation","page":"Home","title":"FermionicHilbertSpaces.IndexConservation","text":"IndexConservation\n\nA symmetry type representing conservation of the numbers of modes which contains a specific index or set of indices.\n\n\n\n\n\n","category":"type"},{"location":"#FermionicHilbertSpaces.JordanWignerOrdering","page":"Home","title":"FermionicHilbertSpaces.JordanWignerOrdering","text":"JordanWignerOrdering\n\nA type representing the ordering of fermionic modes.\n\n\n\n\n\n","category":"type"},{"location":"#FermionicHilbertSpaces.NoSymmetry","page":"Home","title":"FermionicHilbertSpaces.NoSymmetry","text":"NoSymmetry\n\nA symmetry type indicating no symmetry constraints.\n\n\n\n\n\n","category":"type"},{"location":"#FermionicHilbertSpaces.ParityConservation","page":"Home","title":"FermionicHilbertSpaces.ParityConservation","text":"ParityConservation\n\nA symmetry type representing conservation of fermion parity.\n\n\n\n\n\n","category":"type"},{"location":"#FermionicHilbertSpaces.SimpleFockHilbertSpace","page":"Home","title":"FermionicHilbertSpaces.SimpleFockHilbertSpace","text":"SimpleFockHilbertSpace\n\nA type representing a simple Fock Hilbert space with all fock states included.\n\n\n\n\n\n","category":"type"},{"location":"#FermionicHilbertSpaces.SymmetricFockHilbertSpace","page":"Home","title":"FermionicHilbertSpaces.SymmetricFockHilbertSpace","text":"SymmetricFockHilbertSpace\n\nA type representing a Fock Hilbert space with fockstates organized by their quantum number.\n\n\n\n\n\n","category":"type"},{"location":"#FermionicHilbertSpaces.embedding","page":"Home","title":"FermionicHilbertSpaces.embedding","text":"embedding(m, H, Hnew)\n\nCompute the fermionic embedding of a matrix m in the basis H into the basis Hnew.\n\n\n\n\n\n","category":"function"},{"location":"#FermionicHilbertSpaces.embedding_unitary-Tuple{Any, Any, JordanWignerOrdering}","page":"Home","title":"FermionicHilbertSpaces.embedding_unitary","text":"embedding_unitary(partition, fockstates, jw)\n\nCompute the unitary matrix that maps between the tensor embedding and the fermionic embedding in the physical subspace. \n# Arguments\n- `partition`: A partition of the labels in `jw` into disjoint sets.\n- `fockstates`: The fock states in the basis\n- `jw`: The Jordan-Wigner ordering.\n\n\n\n\n\n","category":"method"},{"location":"#FermionicHilbertSpaces.eval_in_basis-Tuple{FermionicHilbertSpaces.FermionSym, Any}","page":"Home","title":"FermionicHilbertSpaces.eval_in_basis","text":"eval_in_basis(a, f)\n\nEvaluate an expression with fermions in a basis f. \n\nExamples\n\n@fermions a\nf = fermions(hilbert_space(1:2))\nFermionicHilbertSpaces.eval_in_basis(a[1]'*a[2] + hc, f)\n\n\n\n\n\n","category":"method"},{"location":"#FermionicHilbertSpaces.extension","page":"Home","title":"FermionicHilbertSpaces.extension","text":"extension(m, H, Hbar[, phase_factors])\n\nExtend an operator or state m from Hilbert space H into a disjoint space Hbar.\n\n\n\n\n\n","category":"function"},{"location":"#FermionicHilbertSpaces.fermion_sparse_matrix-Tuple{Any, FermionicHilbertSpaces.AbstractFockHilbertSpace}","page":"Home","title":"FermionicHilbertSpaces.fermion_sparse_matrix","text":"fermion_sparse_matrix(fermion_number, H::AbstractFockHilbertSpace)\n\nConstructs a sparse matrix of size representing a fermionic annihilation operator at bit position fermion_number on the Hilbert space H. \n\n\n\n\n\n","category":"method"},{"location":"#FermionicHilbertSpaces.fermion_to_majorana","page":"Home","title":"FermionicHilbertSpaces.fermion_to_majorana","text":"fermion_to_majorana(expr)\n\nConvert symbolic fermions to symbolic majoranas.\n\n\n\n\n\n","category":"function"},{"location":"#FermionicHilbertSpaces.fermionic_kron","page":"Home","title":"FermionicHilbertSpaces.fermionic_kron","text":"fermionic_kron(ms, Hs, H::AbstractHilbertSpace=tensor_product(Hs))\n\nCompute the fermionic tensor product of matrices or vectors in ms with respect to the spaces Hs, respectively. Return a matrix in the space H, which defaults to the tensor_product product of Hs.\n\n\n\n\n\n","category":"function"},{"location":"#FermionicHilbertSpaces.fermions-Tuple{FermionicHilbertSpaces.AbstractFockHilbertSpace}","page":"Home","title":"FermionicHilbertSpaces.fermions","text":"fermions(H)\n\nReturn a dictionary of fermionic annihilation operators for the Hilbert space H.\n\n\n\n\n\n","category":"method"},{"location":"#FermionicHilbertSpaces.focknumbers-Tuple{SimpleFockHilbertSpace}","page":"Home","title":"FermionicHilbertSpaces.focknumbers","text":"focknumbers(H)\n\nReturn an iterator over all Fock states for the given Hilbert space H.\n\n\n\n\n\n","category":"method"},{"location":"#FermionicHilbertSpaces.fockstates-Tuple{Any, Any}","page":"Home","title":"FermionicHilbertSpaces.fockstates","text":"fockstates(M, n)\n\nGenerate a list of Fock states with n occupied fermions in a system with M different fermions.\n\n\n\n\n\n","category":"method"},{"location":"#FermionicHilbertSpaces.focksymmetry-Tuple{Any, Any}","page":"Home","title":"FermionicHilbertSpaces.focksymmetry","text":"focksymmetry(focknumbers, qn)\n\nConstructs a FockSymmetry object that represents the symmetry of a many-body system. \n\nArguments\n\nfocknumbers: The focknumbers to iterate over\nqn: A function that takes an integer representing a fock state and returns corresponding quantum number.\n\n\n\n\n\n","category":"method"},{"location":"#FermionicHilbertSpaces.hilbert_space-Tuple{Any}","page":"Home","title":"FermionicHilbertSpaces.hilbert_space","text":"hilbert_space(labels[, symmetry, focknumbers])\n\nConstruct a Hilbert space from a set of labels, with optional symmetry and Fock number specification.\n\n\n\n\n\n","category":"method"},{"location":"#FermionicHilbertSpaces.jwstring-Tuple{Any, Any}","page":"Home","title":"FermionicHilbertSpaces.jwstring","text":"jwstring(site, focknbr)\n\nParity of the number of fermions to the right of site.\n\n\n\n\n\n","category":"method"},{"location":"#FermionicHilbertSpaces.majorana_to_fermion","page":"Home","title":"FermionicHilbertSpaces.majorana_to_fermion","text":"majorana_to_fermion(expr)\n\nConvert symbolic majoranas to symbolic fermions.\n\n\n\n\n\n","category":"function"},{"location":"#FermionicHilbertSpaces.majoranas","page":"Home","title":"FermionicHilbertSpaces.majoranas","text":"majoranas(H)\n\nReturn a dictionary of Majorana operators for the Hilbert space H.\n\n\n\n\n\n","category":"function"},{"location":"#FermionicHilbertSpaces.numberoperator-Tuple{FermionicHilbertSpaces.AbstractFockHilbertSpace}","page":"Home","title":"FermionicHilbertSpaces.numberoperator","text":"numberoperator(H)\n\nReturn the number operator for the Hilbert space H.\n\n\n\n\n\n","category":"method"},{"location":"#FermionicHilbertSpaces.parityoperator-Tuple{FermionicHilbertSpaces.AbstractFockHilbertSpace}","page":"Home","title":"FermionicHilbertSpaces.parityoperator","text":"parityoperator(H)\n\nReturn the fermionic parity operator for the Hilbert space H.\n\n\n\n\n\n","category":"method"},{"location":"#FermionicHilbertSpaces.partial_trace!","page":"Home","title":"FermionicHilbertSpaces.partial_trace!","text":"partial_trace!(mout, m::AbstractMatrix, H::AbstractHilbertSpace, Hout::AbstractHilbertSpace, phase_factors)\n\nCompute the fermionic partial trace of a matrix m in basis H, leaving only the subsystems specified by labels. The result is stored in mout, and Hout determines the ordering of the basis states.\n\n\n\n\n\n","category":"function"},{"location":"#FermionicHilbertSpaces.partial_trace-Union{Tuple{T}, Tuple{AbstractMatrix{T}, FermionicHilbertSpaces.AbstractHilbertSpace, FermionicHilbertSpaces.AbstractHilbertSpace}, Tuple{AbstractMatrix{T}, FermionicHilbertSpaces.AbstractHilbertSpace, FermionicHilbertSpaces.AbstractHilbertSpace, Bool}} where T","page":"Home","title":"FermionicHilbertSpaces.partial_trace","text":"partial_trace(m::AbstractMatrix,  bHfull::AbstractHilbertSpace, Hsub::AbstractHilbertSpace)\n\nCompute the partial trace of a matrix m, leaving the subsystem defined by the basis bsub.\n\n\n\n\n\n","category":"method"},{"location":"#FermionicHilbertSpaces.removefermion-Tuple{Any, FockNumber}","page":"Home","title":"FermionicHilbertSpaces.removefermion","text":"removefermion(digitposition, f::FockNumber)\n\nReturn (newfocknbr, fermionstatistics) where newfocknbr is the state obtained by removing a fermion at digitposition from f and fermionstatistics is the phase from the Jordan-Wigner string, or 0 if the operation is not allowed.\n\n\n\n\n\n","category":"method"},{"location":"#FermionicHilbertSpaces.subspace-Tuple{Any, SimpleFockHilbertSpace}","page":"Home","title":"FermionicHilbertSpaces.subspace","text":"subspace(modes, H::AbstractHilbertSpace)\n\nReturn a subspace of the Hilbert space H that is spanned by the modes in modes. Only substates in H are included.\n\n\n\n\n\n","category":"method"},{"location":"#FermionicHilbertSpaces.tensor_product","page":"Home","title":"FermionicHilbertSpaces.tensor_product","text":"tensor_product(ms, Hs, H::AbstractHilbertSpace, phase_factors=true)\n\nCompute the ordered product of the fermionic embeddings of the matrices ms in the spaces Hs into the space H.\n\n\n\n\n\n","category":"function"},{"location":"#FermionicHilbertSpaces.tensor_product-Tuple{AbstractVector{<:FermionicHilbertSpaces.AbstractHilbertSpace}}","page":"Home","title":"FermionicHilbertSpaces.tensor_product","text":"tensor_product(Hs)\n\nCompute the tensorproduct product hilbert spaces Hs. The symmetry of the resulting basis is computed by promotesymmetry.\n\n\n\n\n\n","category":"method"},{"location":"#FermionicHilbertSpaces.@fermions-Tuple","page":"Home","title":"FermionicHilbertSpaces.@fermions","text":"@fermions a b ...\n\nCreate one or more fermion species with the given names. Indexing into fermions species gives a concrete fermion. Fermions in one @fermions block anticommute with each other,  and commute with fermions in other @fermions blocks.\n\nExamples:\n\n@fermions a b creates two species of fermions that anticommute:\na[1]' * a[1] + a[1] * a[1]' == 1\na[1]' * b[1] + b[1] * a[1]' == 0\n@fermions a; @fermions b creates two species of fermions that commute with each other:\na[1]' * a[1] + a[1] * a[1]' == 1\na[1] * b[1] - b[1] * a[1] == 0\n\nSee also @majoranas, FermionicHilbertSpaces.eval_in_basis.\n\n\n\n\n\n","category":"macro"},{"location":"#FermionicHilbertSpaces.@majoranas-Tuple","page":"Home","title":"FermionicHilbertSpaces.@majoranas","text":"@majoranas a b ...\n\nCreate one or more Majorana species with the given names. Indexing into Majorana species gives a concrete Majorana. Majoranas in one @majoranas block anticommute with each other, and commute with Majoranas in other @majoranas blocks.\n\nExamples:\n\n@majoranas a b creates two species of Majoranas that anticommute:\na[1] * a[1] + a[1] * a[1] == 1\na[1] * b[1] + b[1] * a[1] == 0\n@majoranas a; @majoranas b creates two species of Majoranas that commute with each other:\na[1] * a[1] + a[1] * a[1] == 1\na[1] * b[1] - b[1] * a[1] == 0\n\nSee also @fermions, FermionicHilbertSpaces.eval_in_basis.\n\n\n\n\n\n","category":"macro"}]
}
